##
##

require 'uuid'
require 'haml'
require 'yaml'
require 'time'
require 'rack/logger'

## Require various mixins too
require 'shibkit/rack/simulator/mixins/render'
require 'shibkit/rack/simulator/mixins/actions'
require 'shibkit/rack/simulator/mixins/injection'
require 'shibkit/rack/simulator/mixins/logging'

## Default record filter mixin code
require 'shibkit/rack/simulator/record_filter'

module Shibkit
  
  module Rack
  
    class Simulator
      
      ## Methods have been split up into mixins to make things more manageable
      include Shibkit::Rack::Simulator::Mixin::Injection
      include Shibkit::Rack::Simulator::Mixin::Render
      include Shibkit::Rack::Simulator::Mixin::Actions
      include Shibkit::Rack::Simulator::Mixin::Logging
      
      ## Easy access to Shibkit's configuration settings
      include Shibkit::Configured
    
      ## Middleware application components and behaviour
      CONTENT_TYPE   = { "Content-Type" => "text/html; charset=utf-8" }
      VIEWS          = [:user_chooser, :fatal_error, :session_status]
  
      def initialize(app)
      
        ## Rack app
        @app = app
  
      end
  
      ## Selecting an action and returning to the Rack stack 
      def call(env)
      
        ## Peek at user input, they might be talking to us
        request = ::Rack::Request.new(env)
        
        ## Models used to adjust session states
        idp  = Shibkit::Rack::Simulator::Model::IDPSession.new(env)
        sp   = Shibkit::Rack::Simulator::Model::SPSession.new(env)
        wayf = Shibkit::Rack::Simulator::Model::WAYFSession.new(env)
        dir  = Shibkit::Rack::Simulator::Model::IDP_Session.new(env)
        
        models = {:idp => idp, :sp => sp, :wayf => wayf, :dir => dir}
        
        ## Catching exceptions in the workflow/routing
        begin

          ## Route to actions according to requested URLs
          case request.path
          
          ## IDP status information
          when idp.status_path
            
            return idp_status_action(env, models)
            
          ## IDP session information
          when idp.session_path
            
            return idp_session_action(env, models) 
          
          ## Request is for the fake IDP's login function
          when idp.login_path
          
            ## Specified a user? (GET or POST) then try logging in
            if request.params['user'] 
              
              return idp_login_action(env, models)
            
            ## Already logged in? With SSO log in again.
            elsif idp.sso? and idp.logged_in?
              
              return idp_sso_action(env, models)
            
            ## Show the chooser page to present login options  
            else
            
              return idp_simple_chooser_action(env, models)
              
          ## IDP SLO request?     
          when idp.logout_path
              
            return idp_logout_action(env, models)
            
          ## WAYF request?
          when wayf.path
              
            return wayf_action(env, models)  
            
          ## SP session status page?
          when sp.session_path
              
            return sp_session_status_action(env, models)
          
          ## SP protected page?    
          when sp.masked_path
            
            ## Valid session in SP
            if sp.logged_in?
              
              return sp_protected_page_action(env, models)
              
            else
              
              return sp_login_action(env, models)
              
            end
            
          else
            
            ## Do nothing, pass on up to the application
            return @app.call(env, models)
            
        end

        ## Catch any errors generated by this middleware class. Do not catch other Middleware errors.
        rescue Rack::Simulator::RuntimeError => oops
        
          ## Render a halt page
          return fatal_error_action(env, oops)
    
        end

      end
  
      private
  
      # ...
  
    end

  end
end



