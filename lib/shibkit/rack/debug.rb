module Shibkit

  module Rack

    class Debug < Shibkit::Rack::Base
      
      ## Models to manage sessions and authnz behaviour
      require 'shibkit/rack/simulator/models/all'
      
      ## Require various mixins too
      require 'shibkit/rack/debug/mixins/actions'
      include Shibkit::Rack::Debug::Mixin::Actions

      ## Setup
      def initialize(app)

        ## Rack app
        @app = app

      end

      ## Selecting an action and returning to the Rack stack 
      def call(env)

        ## Peek at user input, they might be talking to us
        request = ::Rack::Request.new(env)

        begin

          ## Route to actions according to requested URLs
          case request.path

          ## Is the demo being requested?
          when regexify(debug_path)

            return debug_page_action(env, nil, options={})

          else

            ## Onwards and upwards: pass control through to next middleware in rack
            return @app.call(env)

          end

        ## Catch any errors generated by this middleware class. Do not catch other Middleware errors.
        rescue Shibkit::Rack::Demo::RuntimeError => oops

          ## Render a halt page
          return fatal_error_action(env, oops)

        end

      end

      private

      def debug_path

        glue_paths(config.debug_path)

      end

    end    
  end
end
